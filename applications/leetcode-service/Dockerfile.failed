# Usar una imagen base de Debian
FROM ubuntu:20.04

ENV DISPLAY=host.docker.internal:0
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome
ENV LEETCODE_SERVICE_COOKIE_DIR=/usr/cookies
ENV LEETCODE_USERNAME=OVERRIDE_DEFAULT_LEETCODE_USERNAME
ENV LEETCODE_PASSWORD=OVERRIDE_DEFAULT_LEETCODE_PASSWORD
ENV PORT=9994
ENV DEBIAN_FRONTEND=noninteractive

# Configuración inicial e instalación de dependencias
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    ca-certificates \
    apt-transport-https \
    software-properties-common \
    bzip2 \
    libasound2 \
    libdbus-glib-1-2 \
    libc6 \
    fonts-liberation \
    libx11-xcb1 \
    libxcomposite1 \
    libxrandr2 \
    libxdamage1 \
    libfontconfig1 \
    libgtk-3-0 \
    x11-xserver-utils \
    --no-install-recommends && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    ca-certificates \
    apt-transport-https \
    software-properties-common \
    fonts-liberation \
    libasound2 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libc6 \
    libcairo2 \
    libcups2 \
    libdbus-1-3 \
    libdrm2 \
    libexpat1 \
    libgbm1 \
    libglib2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libpango-1.0-0 \
    libudev1 \
    libvulkan1 \
    libx11-6 \
    libxcb1 \
    libxcomposite1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxkbcommon0 \
    libxrandr2 \
    xdg-utils \
    --no-install-recommends && \
    rm -rf /var/lib/apt/lists/*

# Actualizar e instalar dependencias
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    ca-certificates \
    apt-transport-https \
    software-properties-common \
    bzip2 \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libatspi2.0-0 \
    libc6 \
    libcairo2 \
    libcups2 \
    libcurl4 \
    libdbus-1-3 \
    libdrm2 \
    libexpat1 \
    libgbm1 \
    libglib2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libpango-1.0-0 \
    libudev1 \
    libvulkan1 \
    libx11-6 \
    libxcb1 \
    libxcomposite1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxkbcommon0 \
    libxrandr2 \
    xdg-utils \
    --no-install-recommends && \
    rm -rf /var/lib/apt/lists/*

# # Agregar el repositorio de Google Chrome
# RUN wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add - && \
#     echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list && \
#     apt-get update && \
#     apt-get install -y google-chrome-stable && \
#     rm -rf /var/lib/apt/lists/*

# # Crear un enlace simbólico a /usr/bin/google-chrome
# RUN ln -s /opt/google/chrome/google-chrome /usr/bin/google-chrome

# Descargar y extraer Firefox desde el sitio oficial de Mozilla
# RUN wget -O firefox.tar.bz2 "https://download.mozilla.org/?product=firefox-latest&os=linux64&lang=en-US" \
#     && tar -xjf firefox.tar.bz2 -C /opt/ \
#     && rm firefox.tar.bz2 \
#     && ln -s /opt/firefox/firefox /usr/bin/firefox

# # Verificar la instalación
# RUN google-chrome --version
# RUN /usr/bin/firefox --version

# Descargar e instalar Google Chrome
# RUN wget -O /tmp/google-chrome-stable_current_amd64.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \
#     dpkg -i /tmp/google-chrome-stable_current_amd64.deb || apt-get install -y -f && \
#     rm /tmp/google-chrome-stable_current_amd64.deb

# Crear el alias
# RUN ln -sf /opt/google/chrome/google-chrome /usr/bin/google-chrome

# Verificar instalación
# RUN google-chrome --version

# Descargar y extraer Firefox desde el sitio oficial de Mozilla
# RUN wget -O firefox.tar.bz2 "https://download.mozilla.org/?product=firefox-latest&os=linux64&lang=en-US" \
#     && tar -xjf firefox.tar.bz2 -C /opt/ \
#     && rm firefox.tar.bz2 \
#     && ln -sf /opt/firefox/firefox /usr/bin/firefox

# Verificar las instalaciones
# RUN google-chrome --version
# RUN firefox --version

# Descargar Google Chrome y luego instalarlo
RUN wget -O /tmp/google-chrome-stable_current_amd64.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \
    apt install -y /tmp/google-chrome-stable_current_amd64.deb && \
    rm /tmp/google-chrome-stable_current_amd64.deb


# RUN wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/google-chrome.gpg && \
#     echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] https://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list && \
#     apt-get update && apt-get install -y google-chrome-stable && \
#     rm -rf /var/lib/apt/lists/*

# # Crear un enlace simbólico si es necesario
# RUN ln -sf /usr/bin/google-chrome /usr/bin/chrome

# # Verificar la instalación
# RUN google-chrome --version

# Configuración adicional (Node.js, Yarn, etc.)
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    xvfb \
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g yarn \
    && rm -rf /var/lib/apt/lists/*


RUN apt-get update && apt-get install -y procps && rm -rf /var/lib/apt/lists/*
# Set up the working directory in the container
WORKDIR /leetcode-service

# Copy package.json and package-lock.json to the working directory
COPY package.json yarn.lock ./

RUN npm install -g --force yarn
RUN corepack enable
RUN yarn set version berry
RUN yarn plugin import https://raw.githubusercontent.com/mhassan1/yarn-plugin-after-install/v0.6.0/bundles/@yarnpkg/plugin-after-install.js
RUN yarn install

# Copy the rest of the application code
COPY . .
RUN yarn build

RUN mkdir -p ${LEETCODE_SERVICE_COOKIE_DIR}

# Expose the port your app runs on
EXPOSE ${PORT}

# Command to run the application
CMD ["npm", "run", "start"]
